[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = ["src/game"]
sourceSets.test.java.srcDirs = ["src/test/java"]
project.ext.mainClassName = "server.MainServer"

eclipse.project
{
    name = appName + "-core"
}

dependencies
{
	implementation "de.mkammerer:argon2-jvm:2.5"
	implementation "org.apache.commons:commons-lang3:$apacheLangVersion"

	implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
  	implementation "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-ai:$aiVersion"
    implementation "com.badlogicgames.ashley:ashley:$ashleyVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-bullet:$gdxVersion"
    implementation "com.badlogicgames.box2dlights:box2dlights:$box2DLightsVersion"

	implementation "org.openjdk.jmh:jmh-core:$jmhVersion"
	implementation "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
}

    test
	{
		useJUnitPlatform()	
		testLogging
		{
			events "passed", "skipped", "failed", "standardOut", "standardError"
		}
	}

sourceSets {
	jmh {
		java.srcDirs = ["src/jmh/java"]
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
	main = 'org.openjdk.jmh.Main'
	classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}
	
classes.finalizedBy(jmhClasses)